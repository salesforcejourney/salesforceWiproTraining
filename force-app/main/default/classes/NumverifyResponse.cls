//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class NumverifyResponse {

	public Boolean valid {get;set;} 
	public String number_Z {get;set;} // in json: number
	public String local_format {get;set;} 
	public String international_format {get;set;} 
	public String country_prefix {get;set;} 
	public String country_code {get;set;} 
	public String country_name {get;set;} 
	public String location {get;set;} 
	public String carrier {get;set;} 
	public String line_type {get;set;} 

	public NumverifyResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'valid') {
						valid = parser.getBooleanValue();
					} else if (text == 'number') {
						number_Z = parser.getText();
					} else if (text == 'local_format') {
						local_format = parser.getText();
					} else if (text == 'international_format') {
						international_format = parser.getText();
					} else if (text == 'country_prefix') {
						country_prefix = parser.getText();
					} else if (text == 'country_code') {
						country_code = parser.getText();
					} else if (text == 'country_name') {
						country_name = parser.getText();
					} else if (text == 'location') {
						location = parser.getText();
					} else if (text == 'carrier') {
						carrier = parser.getText();
					} else if (text == 'line_type') {
						line_type = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'NumverifyResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static NumverifyResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new NumverifyResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



}